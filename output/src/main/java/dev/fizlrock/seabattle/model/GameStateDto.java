/*
 * Seabattle API
 * Сервис для игры в морской бой
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: nirku0soft@yandex.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.fizlrock.seabattle.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * Состояние игры
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GameStateDto {
  public static final String SERIALIZED_NAME_CHANGE_COUNT = "change_count";
  @SerializedName(SERIALIZED_NAME_CHANGE_COUNT)
  @javax.annotation.Nullable
  private Long changeCount;

  /**
   * Этап жизненного цикла игры
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STARTED(String.valueOf("Started")),
    
    WAITING_SECOND_PLAYER(String.valueOf("WaitingSecondPlayer")),
    
    ENDED(String.valueOf("Ended")),
    
    FAILED(String.valueOf("Failed"));

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private StatusEnum status;

  public static final String SERIALIZED_NAME_OPONENT_NAME = "oponent_name";
  @SerializedName(SERIALIZED_NAME_OPONENT_NAME)
  @javax.annotation.Nullable
  private String oponentName;

  public static final String SERIALIZED_NAME_YOU_SHOTING = "you_shoting";
  @SerializedName(SERIALIZED_NAME_YOU_SHOTING)
  @javax.annotation.Nullable
  private Boolean youShoting;

  public static final String SERIALIZED_NAME_YOUR_FIELD = "your_field";
  @SerializedName(SERIALIZED_NAME_YOUR_FIELD)
  @javax.annotation.Nullable
  private String yourField;

  public static final String SERIALIZED_NAME_OPONENT_FIELD = "oponent_field";
  @SerializedName(SERIALIZED_NAME_OPONENT_FIELD)
  @javax.annotation.Nullable
  private String oponentField;

  public GameStateDto() {
  }

  public GameStateDto changeCount(@javax.annotation.Nullable Long changeCount) {
    
    this.changeCount = changeCount;
    return this;
  }

  /**
   * Get changeCount
   * minimum: 0
   * @return changeCount
   */
  @javax.annotation.Nullable

  public Long getChangeCount() {
    return changeCount;
  }


  public void setChangeCount(@javax.annotation.Nullable Long changeCount) {
    this.changeCount = changeCount;
  }

  public GameStateDto status(@javax.annotation.Nonnull StatusEnum status) {
    
    this.status = status;
    return this;
  }

  /**
   * Этап жизненного цикла игры
   * @return status
   */
  @javax.annotation.Nonnull

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }

  public GameStateDto oponentName(@javax.annotation.Nullable String oponentName) {
    
    this.oponentName = oponentName;
    return this;
  }

  /**
   * Get oponentName
   * @return oponentName
   */
  @javax.annotation.Nullable

  public String getOponentName() {
    return oponentName;
  }


  public void setOponentName(@javax.annotation.Nullable String oponentName) {
    this.oponentName = oponentName;
  }

  public GameStateDto youShoting(@javax.annotation.Nullable Boolean youShoting) {
    
    this.youShoting = youShoting;
    return this;
  }

  /**
   * Ваша ли очередь делать выстрел
   * @return youShoting
   */
  @javax.annotation.Nullable

  public Boolean getYouShoting() {
    return youShoting;
  }


  public void setYouShoting(@javax.annotation.Nullable Boolean youShoting) {
    this.youShoting = youShoting;
  }

  public GameStateDto yourField(@javax.annotation.Nullable String yourField) {
    
    this.yourField = yourField;
    return this;
  }

  /**
   * Состояние игрового поля 
   * @return yourField
   */
  @javax.annotation.Nullable

  public String getYourField() {
    return yourField;
  }


  public void setYourField(@javax.annotation.Nullable String yourField) {
    this.yourField = yourField;
  }

  public GameStateDto oponentField(@javax.annotation.Nullable String oponentField) {
    
    this.oponentField = oponentField;
    return this;
  }

  /**
   * Состояние игрового поля 
   * @return oponentField
   */
  @javax.annotation.Nullable

  public String getOponentField() {
    return oponentField;
  }


  public void setOponentField(@javax.annotation.Nullable String oponentField) {
    this.oponentField = oponentField;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GameStateDto gameStateDto = (GameStateDto) o;
    return Objects.equals(this.changeCount, gameStateDto.changeCount) &&
        Objects.equals(this.status, gameStateDto.status) &&
        Objects.equals(this.oponentName, gameStateDto.oponentName) &&
        Objects.equals(this.youShoting, gameStateDto.youShoting) &&
        Objects.equals(this.yourField, gameStateDto.yourField) &&
        Objects.equals(this.oponentField, gameStateDto.oponentField);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeCount, status, oponentName, youShoting, yourField, oponentField);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GameStateDto {\n");
    sb.append("    changeCount: ").append(toIndentedString(changeCount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    oponentName: ").append(toIndentedString(oponentName)).append("\n");
    sb.append("    youShoting: ").append(toIndentedString(youShoting)).append("\n");
    sb.append("    yourField: ").append(toIndentedString(yourField)).append("\n");
    sb.append("    oponentField: ").append(toIndentedString(oponentField)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private GameStateDto instance;

    public Builder() {
      this(new GameStateDto());
    }

    protected Builder(GameStateDto instance) {
      this.instance = instance;
    }

    public GameStateDto.Builder changeCount(Long changeCount) {
      this.instance.changeCount = changeCount;
      return this;
    }
    public GameStateDto.Builder status(StatusEnum status) {
      this.instance.status = status;
      return this;
    }
    public GameStateDto.Builder oponentName(String oponentName) {
      this.instance.oponentName = oponentName;
      return this;
    }
    public GameStateDto.Builder youShoting(Boolean youShoting) {
      this.instance.youShoting = youShoting;
      return this;
    }
    public GameStateDto.Builder yourField(String yourField) {
      this.instance.yourField = yourField;
      return this;
    }
    public GameStateDto.Builder oponentField(String oponentField) {
      this.instance.oponentField = oponentField;
      return this;
    }


    /**
    * returns a built GameStateDto instance.
    *
    * The builder is not reusable.
    */
    public GameStateDto build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static GameStateDto.Builder builder() {
    return new GameStateDto.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public GameStateDto.Builder toBuilder() {
    return new GameStateDto.Builder()
      .changeCount(getChangeCount())
      .status(getStatus())
      .oponentName(getOponentName())
      .youShoting(getYouShoting())
      .yourField(getYourField())
      .oponentField(getOponentField());
  }


}

